<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lab Request Orders Query</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <style>
        .card { margin-bottom: 20px; }
        .summary-card { background-color: #f8f9fa; }
    </style>
</head>
<body>
     
        
        <!-- Facilities That Sent Data -->
        <div class="card mb-3">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Facilities That Sent Data</h5>
            </div>
            <div class="card-body">
                <div class="row mb-2">
                    <div class="col-md-6">
                        <input type="date" id="activeDate" class="form-control" value="{{ default_end }}">
                    </div>
                    <div class="col-md-6">
                        <button class="btn btn-info" id="fetchActiveFacilities">Show Facilities</button>
                    </div>
                </div>
                <div id="activeFacilitiesList"></div>
            </div>



            
        </div>
        
        <!-- Facility Statuses for Selected Date -->
        <div class="card mb-3">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0">Facility Statuses for Selected Date</h5>
            </div>

            <div class="card-body">
                <form id="queryForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="startDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="startDate" value="{{ default_start }}">
                        </div>
                        <div class="col-md-6">
                            <label for="endDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="endDate" value="{{ default_end }}">
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <label class="form-label">Facilities</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAllFacilities">
                                <label class="form-check-label" for="selectAllFacilities">Select All Facilities</label>
                            </div>
                            <div class="row mt-2">
                                {% for facility in facilities %}
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input facility-check" type="checkbox" 
                                               value="{{ facility.id }}" id="facility-{{ facility.id }}" checked>
                                        <label class="form-check-label" for="facility-{{ facility.id }}">
                                            {{ facility.name }} ({{ facility.id }})
                                        </label>
                                    </div>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
<!--                     
                    <button type="submit" class="btn btn-primary" id="runQuery">Run Query</button> -->
                </form>
            </div>



            <div class="card-body">
                <button class="btn btn-warning mb-2" id="fetchFacilityStatuses">Show Facility Statuses</button>
                <div id="facilityStatusesList"></div>
            </div>
        </div>
        
        <!-- Summary Cards -->
        <div class="row" id="summaryRow" style="display: none;">
            <div class="col-md-6">
                <div class="card summary-card">
                    <div class="card-body">
                        <h5 class="card-title">Total Orders</h5>
                        <h3 class="card-text" id="totalOrders">0</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card summary-card">
                    <div class="card-body">
                        <h5 class="card-title">Orders by Facility</h5>
                        <div id="facilityCounts"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Results Table -->
        <div class="card" id="resultsCard" style="display: none;">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">Query Results</h5>
            </div>
            <div class="card-body">
                <table id="resultsTable" class="table table-striped" style="width:100%">
                    <thead>
                        <tr>
                            <th>Lab Request Number</th>
                            <th>Task Authored On</th>
                            <th>Facility</th>
                            <th>Facility ID</th>
                            <th>Task Status</th>
                            <th>Date Sample Taken</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    
    <script>
        $(document).ready(function() {
            // Select all facilities toggle
            $('#selectAllFacilities').change(function() {
                $('.facility-check').prop('checked', this.checked);
            });
            
            // Handle form submission
            $('#queryForm').submit(function(e) {
                e.preventDefault();
                
                // Get selected facilities
                const facilities = [];
                $('.facility-check:checked').each(function() {
                    facilities.push($(this).val());
                });
                
                // Get date range
                const startDate = $('#startDate').val();
                const endDate = $('#endDate').val();
                
                if (facilities.length === 0) {
                    alert('Please select at least one facility.');
                    return;
                }
                
                // Show loading state
                $('#runQuery').prop('disabled', true).html(
                    '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Running Query...'
                );
                
                // Send query request
                $.ajax({
                    url: '/query',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        facilities: facilities,
                        start_date: startDate,
                        end_date: endDate
                    }),
                    success: function(response) {
                        // Update summary cards
                        $('#totalOrders').text(response.count);
                        
                        let facilityCountsHtml = '';
                        for (const [facilityId, count] of Object.entries(response.facility_counts)) {
                            facilityCountsHtml += `<div>${facilityId}: ${count} orders</div>`;
                        }
                        $('#facilityCounts').html(facilityCountsHtml);
                        $('#summaryRow').show();
                        
                        // Update results table
                        const table = $('#resultsTable').DataTable({
                            destroy: true,
                            data: response.data,
                            columns: [
                                { data: 'lab_request_number' },
                                { 
                                    data: 'task_authored_on',
                                    render: function(data) {
                                        return new Date(data).toLocaleString();
                                    }
                                },
                                { data: 'encounter_facility' },
                                { data: 'encounter_facility_id' },
                                { data: 'task_status' },
                                { 
                                    data: 'date_sample_taken',
                                    render: function(data) {
                                        return data ? new Date(data).toLocaleDateString() : 'N/A';
                                    }
                                }
                            ],
                            pageLength: 10,
                            order: [[1, 'desc']]
                        });
                        
                        $('#resultsCard').show();
                    },
                    error: function(xhr) {
                        let errorMsg = 'Unknown error';
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMsg = xhr.responseJSON.error;
                        } else if (xhr.responseText) {
                            errorMsg = xhr.responseText;
                        }
                        $('#activeFacilitiesList').html('Error: ' + errorMsg);
                    },
                    complete: function() {
                        $('#runQuery').prop('disabled', false).html('Run Query');
                    }
                });
            });
            
            // Fetch active facilities
            $('#fetchActiveFacilities').click(function() {
                const date = $('#activeDate').val();
                $('#activeFacilitiesList').html('Loading...');
                $.ajax({
                    url: '/active_facilities',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ date: date }),
                    success: function(response) {
                        if (response.facilities.length === 0) {
                            $('#activeFacilitiesList').html('<div>No facilities sent data on this date.</div>');
                        } else {
                            let html = `<div><strong>${response.count} facilities sent data:</strong></div><ul>`;
                            response.facilities.forEach(f => {
                                html += `<li>${f.encounter_facility} (${f.encounter_facility_id})</li>`;
                            });
                            html += '</ul>';
                            $('#activeFacilitiesList').html(html);
                        }
                    },
                    error: function(xhr) {
                        let errorMsg = 'Unknown error';
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMsg = xhr.responseJSON.error;
                        } else if (xhr.responseText) {
                            errorMsg = xhr.responseText;
                        }
                        $('#activeFacilitiesList').html('Error: ' + errorMsg);
                    }
                });
            });

            // Fetch facility statuses
            $('#fetchFacilityStatuses').click(function() {
                const date = $('#activeDate').val();
                // Get all facility IDs from the checkboxes
                const facilities = [];
                $('.facility-check').each(function() {
                    facilities.push($(this).val());
                });
                $('#facilityStatusesList').html('Loading...');
                $.ajax({
                    url: '/facility_statuses',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ date: date, facilities: facilities }),
                    success: function(response) {
                        let html = '';
                        for (const [facilityId, info] of Object.entries(response)) {
                            html += `<div class="mb-3"><strong>${facilityId} (${info.name || facilityId})</strong><br>`;
                            if (info.no_orders) {
                                html += `<span class="text-danger">No orders from this facility.</span>`;
                            } else {
                                html += `<ul>`;
                                for (const [status, count] of Object.entries(info.statuses)) {
                                    html += `<li>${status}: ${count}</li>`;
                                }
                                html += `</ul>`;
                            }
                            html += `</div>`;
                        }
                        $('#facilityStatusesList').html(html);
                    },
                    error: function(xhr) {
                        let errorMsg = 'Unknown error';
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMsg = xhr.responseJSON.error;
                        } else if (xhr.responseText) {
                            errorMsg = xhr.responseText;
                        }
                        $('#facilityStatusesList').html('Error: ' + errorMsg);
                    }
                });
            });

            // Optionally auto-load for today on page load
            $('#fetchActiveFacilities').click();
            $('#fetchFacilityStatuses').click();
        });
    </script>
</body>
</html>


=========================================================================================================================================
from flask import Flask, render_template, request, jsonify
import pyhive
from pyhive import hive
import pandas as pd
from datetime import datetime, timedelta
import json

app = Flask(__name__)

# Database configuration (update with your actual credentials)
HIVE_HOST = '197.221.242.150'
HIVE_PORT = 17251
HIVE_USERNAME = 'tjima'
HIVE_PASSWORD = 'vHYWzTVyygV4Q8tq'
HIVE_DATABASE = 'default'

def get_hive_connection():
    
    """Establish connection to Hive database"""
    try:
        conn = hive.Connection(
            host=HIVE_HOST,
            port=HIVE_PORT,
            username=HIVE_USERNAME,
            password=HIVE_PASSWORD,
            database=HIVE_DATABASE,
            auth='LDAP'  # or other authentication method
        )
        return conn
    except Exception as e:
        print(f"Error connecting to Hive: {str(e)}")
        return None

def execute_query(facilities, start_date, end_date):
    """Execute the Hive query with provided parameters"""
    conn = get_hive_connection()
    if not conn:
        return None
    
    try:
        # Format facilities for SQL query
        facilities_str = ", ".join([f"'{f}'" for f in facilities])
        
        # Build the query
        query = f"""
        select distinct 
            lab_request_number, 
            task_authored_on,
            encounter_facility, 
            encounter_facility_id, 
            task_status, 
            date_sample_taken 
        from fact_lab_request_orders 
        where encounter_facility_id in ({facilities_str})
            and cast(task_authored_on as date) >= '{start_date}'
            and cast(task_authored_on as date) <= '{end_date}'
            and lab = 'MPILO' 
            and test_type like '%Viral Load%'
        """
        
        # Execute query and fetch results
        df = pd.read_sql_query(query, conn)
        return df
    except Exception as e:
        print(f"Error executing query: {str(e)}")
        return None
    finally:
        if conn:
            conn.close()

@app.route('/')
def index():
    """Main page with form and results"""
    # Default date range (last 7 days)
    default_end = datetime.now().strftime('%Y-%m-%d')
    default_start = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    
    # Predefined facility list
    facilities = [
        {'id': 'ZW090A17', 'name': 'Nketa'},
        {'id': 'ZW090A02', 'name': 'Tshabalala'},
        {'id': 'ZW090A12', 'name': 'Princess Margaret'},
        {'id': 'ZW090A14', 'name': 'Dr. Shennan'},
        {'id': 'ZW090A66', 'name': 'Mahatshula'},
        {'id': 'ZW090A07', 'name': 'Magwegwe'}
    ]
    
    return render_template('index.html', 
                         facilities=facilities,
                         default_start=default_start,
                         default_end=default_end)


@app.route('/active_facilities', methods=['POST'])
def active_facilities():
    """Return facilities that sent data on a specific date"""
    try:
        data = request.get_json()
        date = data.get('date')
        if not date:
            return jsonify({'error': 'Missing date parameter'}), 400

        conn = get_hive_connection()
        if not conn:
            return jsonify({'error': 'Failed to connect to Hive'}), 500

        query = f"""
        SELECT DISTINCT encounter_facility_id, encounter_facility
        FROM fact_lab_request_orders
        WHERE cast(task_authored_on as date) = '{date}'
            AND lab = 'MPILO'
            AND test_type LIKE '%Viral Load%'
        """

        df = pd.read_sql_query(query, conn)
        facilities = df.to_dict('records')
        return jsonify({'facilities': facilities, 'count': len(facilities)})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/facility_statuses', methods=['POST'])
def facility_statuses():
    """Return status counts for each facility on a specific date"""
    try:
        data = request.get_json()
        date = data.get('date')
        facilities = data.get('facilities', [])
        # You need to also get facility names from your config
        facility_map = {
            'ZW090A17': 'Nketa',
            'ZW090A02': 'Tshabalala',
            'ZW090A12': 'Princess Margaret',
            'ZW090A14': 'Dr. Shennan',
            'ZW090A66': 'Mahatshula',
            'ZW090A07': 'Magwegwe'
        }
        if not date or not facilities:
            return jsonify({'error': 'Missing date or facilities parameter'}), 400

        conn = get_hive_connection()
        if not conn:
            return jsonify({'error': 'Failed to connect to Hive'}), 500

        facilities_str = ", ".join([f"'{f}'" for f in facilities])
        query = f"""
        SELECT 
            encounter_facility_id, 
            encounter_facility,
            task_status,
            COUNT(DISTINCT lab_request_number) AS order_count
        FROM fact_lab_request_orders
        WHERE encounter_facility_id IN ({facilities_str})
            AND cast(task_authored_on as date) = '{date}'
            AND lab = 'MPILO'
            AND test_type LIKE '%Viral Load%'
        GROUP BY encounter_facility_id, encounter_facility, task_status
        """

        import pandas as pd
        df = pd.read_sql_query(query, conn)
        result = {}
        for facility in facilities:
            facility_rows = df[df['encounter_facility_id'] == facility]
            if facility_rows.empty:
                # Use the name from your map
                result[facility] = {
                    'name': facility_map.get(facility, facility),
                    'statuses': {},
                    'no_orders': True
                }
            else:
                statuses = {row['task_status']: int(row['order_count']) for _, row in facility_rows.iterrows()}
                name = facility_rows.iloc[0]['encounter_facility']
                result[facility] = {
                    'name': name,
                    'statuses': statuses,
                    'no_orders': False
                }
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)



